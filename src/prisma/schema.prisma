// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL") // uses connection pooling
  // directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

enum personaTypes {
  PASSPORTBRO
  DIGITALNOMAD
  EXPAT
  TOURIST
  BACKPACKER
}

enum notificationType {
  friend_request
  message
  comment_post
  comment_reply
  comment_photo
}

enum notificationStatus {
  pending
  accepted
  read
}

enum friendStatus {
  pending
  accepted
  rejected
  blocked
  inactive
}

model Users {
  id                     Int             @id @unique @default(autoincrement())
  email                  String          @unique
  password               String?
  created_At             DateTime        @default(now())
  bio                    String?         @db.Text
  persona                personaTypes?
  jobTitle               String?
  companyName            String?
  userName               String?
  newUser                Boolean         @default(true)
  profilePicture         String?
  Posts                  Posts[]
  comments               Comments[]
  photos                 Photos[]
  sentFriendRequests     Notifications[] @relation("SentFriendRequests")
  receivedFriendRequests Notifications[] @relation("ReceivedFriendRequests")
  friendsA               Friends[]       @relation("FriendsA")
  friendsB               Friends[]       @relation("FriendsB")
}

model Posts {
  id        Int        @id @unique @default(autoincrement())
  postBody  String?    @db.VarChar(1500)
  createdAT DateTime   @default(now())
  imageSrc  String?
  videoSrc  String?
  // relations:
  author    Users      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comments[]
}

model Comments {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  comment   String   @db.VarChar(1500)

  // relations:
  post     Posts @relation(fields: [postId], references: [id])
  author   Users @relation(fields: [authorId], references: [id])
  postId   Int
  authorId Int
}

model Photos {
  id          Int      @id @unique @default(autoincrement())
  imageSrc    String
  description String?
  createdAt   DateTime @default(now())

  // relations:
  user   Users @relation(fields: [userId], references: [id])
  userId Int
}

model Notifications {
  id      Int                @id @unique @default(autoincrement())
  message String
  type    notificationType
  status  notificationStatus

  // relations:
  sender   Users @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId Int

  receiver   Users @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId Int
}

model Friends {
  id     Int          @id @default(autoincrement())
  userA  Int
  userB  Int
  status friendStatus

  // relations:
  userARef Users @relation("FriendsA", fields: [userA], references: [id])
  userBRef Users @relation("FriendsB", fields: [userB], references: [id])
}
